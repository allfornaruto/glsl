
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          RT: 
            value: 
              - 1.000
              - 1.000
              - 1.000
              - 1.000
            inspector: 
              type: color
          LT: 
            value: 
              - 1.000
              - 1.000
              - 1.000
              - 1.000
            inspector: 
              type: color
          RB: 
            value: 
              - 1.000
              - 1.000
              - 1.000
              - 1.000
            inspector: 
              type: color
          LB: 
            value: 
              - 1.000
              - 1.000
              - 1.000
              - 1.000
            inspector: 
              type: color
}%

CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec4 RT;
		vec4 LT;
		vec4 RB;
		vec4 LB;
	};

    vec4 c_Color4Gradients_main_3(vec2 UV, vec4 ColorLB, vec4 ColorRB, vec4 ColorLT, vec4 ColorRT) {
	    return mix(mix(ColorLT, ColorRT, UV.x), mix(ColorLB, ColorRB, UV.x), UV.y);
	}
	vec4 c_Output_main_1(vec4 Color) {
	    return Color;
	}
	void main()
	{
	    gl_FragColor = c_Color4Gradients_main_3(v_uv0, vec4(LB), vec4(RB), vec4(LT), vec4(RT));
	}
}%
        