
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          colorB: 
            value: 
              - 0.922
              - 0.788
              - 0.361
              - 1.000
            inspector: 
              type: color
          frequency: 
            value: 10.0
          colorA: 
            value: 
              - 1.000
              - 0.341
              - 0.584
              - 1.000
            inspector: 
              type: color
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec4 colorB;
		vec4 colorA;
		float frequency;
	};

    vec2 c_UV0_main_13() {
	    return v_uv0;
	}
	vec4 c_ProceduralCheckerboard_main_9 (vec2 UV, vec4 ColorA, vec4 ColorB, float Frequency) {
	    vec2 c = floor(UV * Frequency) / 2.0;
	    float checker = 2.0 * fract(c.x + c.y);
	    return checker * ColorA + (1.0 - checker) * ColorB;
	}
	vec4 c_Output_main_1(vec4 Color) { 
	    return Color; 
	}
	void main()                                    
	{                                              
	    vec2 out_UV_UV0_13 = c_UV0_main_13();
	    vec4 out_Color_ProceduralCheckerboard_9 = c_ProceduralCheckerboard_main_9(vec2(out_UV_UV0_13), vec4(colorA), vec4(colorB), frequency);
	    gl_FragColor = c_Output_main_1(vec4(out_Color_ProceduralCheckerboard_9));
	}                                              
	
}%
        