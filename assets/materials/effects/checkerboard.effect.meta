{
  "ver": "1.0.25",
  "uuid": "a02f7e84-8420-4083-9966-e486a0f6ba62",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec4 colorB;\nuniform vec4 colorA;\nuniform float frequency;\n  vec2 c_UV0_main_13() {\n    return v_uv0;\n}\nvec4 c_ProceduralCheckerboard_main_9 (vec2 UV, vec4 ColorA, vec4 ColorB, float Frequency) {\n    vec2 c = floor(UV * Frequency) / 2.0;\n    float checker = 2.0 * fract(c.x + c.y);\n    return checker * ColorA + (1.0 - checker) * ColorB;\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec2 out_UV_UV0_13 = c_UV0_main_13();\n    vec4 out_Color_ProceduralCheckerboard_9 = c_ProceduralCheckerboard_main_9(vec2(out_UV_UV0_13), vec4(colorA), vec4(colorB), frequency);\n    gl_FragColor = c_Output_main_1(vec4(out_Color_ProceduralCheckerboard_9));\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec4 colorB;\n  vec4 colorA;\n  float frequency;\n};\n  vec2 c_UV0_main_13() {\n    return v_uv0;\n}\nvec4 c_ProceduralCheckerboard_main_9 (vec2 UV, vec4 ColorA, vec4 ColorB, float Frequency) {\n    vec2 c = floor(UV * Frequency) / 2.0;\n    float checker = 2.0 * fract(c.x + c.y);\n    return checker * ColorA + (1.0 - checker) * ColorB;\n}\nvec4 c_Output_main_1(vec4 Color) {\n    return Color;\n}\nvoid main()\n{\n    vec2 out_UV_UV0_13 = c_UV0_main_13();\n    vec4 out_Color_ProceduralCheckerboard_9 = c_ProceduralCheckerboard_main_9(vec2(out_UV_UV0_13), vec4(colorA), vec4(colorB), frequency);\n    gl_FragColor = c_Output_main_1(vec4(out_Color_ProceduralCheckerboard_9));\n}"
      }
    }
  ],
  "subMetas": {}
}