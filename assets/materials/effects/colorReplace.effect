
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          from: 
            value:
              - 1.000
              - 1.000
              - 1.000
              - 1.000
            inspector: 
              type: color
          to: 
            value: 
              - 1.000
              - 1.000
              - 1.000
              - 1.000
            inspector: 
              type: color
          range: 
            value: 0.1
          fuzziness: 
            value: 0.01
}%

CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%

CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec4 from;
		vec4 to;
		float range;
		float fuzziness;
	};

    vec4 c_ColorReplace_main_4 (vec4 Color, vec4 From, vec4 To, float Range, float Fuzziness) {
	   float Distance = distance(From, Color);
	   return mix(To, Color, clamp((Distance - Range) / max(Fuzziness, -10000.0), 0.0, 1.0));
	}
	vec4 c_Output_main_1(vec4 Color) { 
	    return Color; 
	}
	void main()                                    
	{                                              
	    vec4 out_Color_ColorReplace_4 = c_ColorReplace_main_4(texture2D(texture, v_uv0), vec4(from), vec4(to), range, fuzziness);
	    gl_FragColor = c_Output_main_1(vec4(out_Color_ColorReplace_4));
	}
}%
        